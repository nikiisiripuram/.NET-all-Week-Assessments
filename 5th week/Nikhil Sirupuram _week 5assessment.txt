 Week 5 assessment codes:ннннннннннннннннннннннннн-нн

 problem 1: Implement an abstract class "Shape" with abstract methods for calculating area and
perimeter. Create three subclasses (e.g., Circle, Rectangle, Triangle) that inherit from
Shape and provide their own implementations for these methods. Demonstrate
polymorphism by creating an array of Shapes and calculating the total area and
perimeter.


// Program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

class Program
{
    static void Main()
    {
        Shape[] shapes = new Shape[]
        {
            new Circle(6),
            new Rectangle(8, 6),
            new Triangle(4, 4, 5)
        };

        double totalArea = 0;
        double totalPerimeter = 0;

        foreach (Shape shape in shapes)
        {
            totalArea += shape.CalculateArea();
            totalPerimeter += shape.CalculatePerimeter();
        }

        Console.WriteLine("Total Area: " + totalArea);
        Console.WriteLine("Total Perimeter: " + totalPerimeter);
    }
}

// Shape.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

public abstract class Shape
{
    public abstract double CalculateArea();
    public abstract double CalculatePerimeter();
}

// Triangle.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

public class Triangle : Shape
{
    private double sideA;
    private double sideB;
    private double sideC;

    public Triangle(double sideA, double sideB, double sideC)
    {
        this.sideA = sideA;
        this.sideB = sideB;
        this.sideC = sideC;
    }

    public override double CalculateArea()
    {
        // Heron's formula for the area of a triangle
        double s = (sideA + sideB + sideC) / 2;
        return Math.Sqrt(s * (s - sideA) * (s - sideB) * (s - sideC));
    }

    public override double CalculatePerimeter()
    {
        return sideA + sideB + sideC;
    }
}

// Circle.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


public class Circle : Shape
{
    private double radius;

    public Circle(double radius)
    {
        this.radius = radius;
    }

    public override double CalculateArea()
    {
        return Math.PI * radius * radius;
    }

    public override double CalculatePerimeter()
    {
        return 2 * Math.PI * radius;
    }
}

// Rectangle.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


public class Rectangle : Shape
{
    private double length;
    private double width;

    public Rectangle(double length, double width)
    {
        this.length = length;
        this.width = width;
    }

    public override double CalculateArea()
    {
        return length * width;
    }

    public override double CalculatePerimeter()
    {
        return 2 * (length + width);
    }
}


Problem 2 :Create a scenario where you need to model a "Person" class with properties like
Name, Age, and Address. Implement multiple interfaces (e.g., IDriver, IStudent,
IEmployee) to represent different roles that a person can have. Create a class that
inherits from Person and implements multiple interfaces, showcasing multiple
inheritance through interfaces.
//program.cs

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Person
{
    internal class Program
    {
        static void Main(string[] args)
        {
            var person = new RoleModel
            {
                Name = "Nikhil",
                Age = 22,
                Address = "IT hill No:123/456"
            };
            IDriver driver = person;
            IStudent student = person;
            IEmployee employee = person;

            driver.Drive();
            student.Study();
            employee.Work();
        }

    }
}

//class1.cs

namespace Person
{
    public class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }
        public string Address { get; set; }
    }
    public interface IDriver
    {
        void Drive();
    }

    public interface IStudent
    {
        void Study();
    }

    public interface IEmployee
    {
        void Work();
    }
}
 // employee.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Person
{
    public class RoleModel : Person, IDriver, IStudent, IEmployee
    {
        public void Drive()
        {
            Console.WriteLine($"{Name} is driving.");
        }

        public void Study()
        {
            Console.WriteLine($"{Name} is studying.");
        }

        public void Work()
        {
            Console.WriteLine($"{Name} is working.");
        }
    }
}


problem -4 :Build a generic collection to manage a library's inventory of books. Create a class
"Book" with properties like Title, Author, and ISBN. Implement a generic collection
(e.g., List<Book>) to add, remove, search, and display books. Utilize generics to
ensure type safety and efficient data management.
//program.cs
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;


class Program
{
    static void Main()
    {
        Library library = new Library();

        while (true)
        {
            Console.WriteLine("Library Management System");
            Console.WriteLine("1. Add Book");
            Console.WriteLine("2. Remove Book");
            Console.WriteLine("3. Search Book by Title");
            Console.WriteLine("4. Display All Books");
            Console.WriteLine("5. Exit");
            Console.Write("Enter your choice: ");

            if (int.TryParse(Console.ReadLine(), out int choice))
            {
                switch (choice)
                {
                    case 1:
                        Console.Write("Enter Book Title: ");
                        string title = Console.ReadLine();
                        Console.Write("Enter Author: ");
                        string author = Console.ReadLine();
                        Console.Write("Enter ISBN: ");
                        string isbn = Console.ReadLine();

                        Book newBook = new Book { Title = title, Author = author, ISBN = isbn };
                        library.AddBook(newBook);
                        break;

                    case 2:
                        Console.Write("Enter ISBN of the Book to Remove: ");
                        string removeISBN = Console.ReadLine();
                        library.RemoveBook(removeISBN);
                        break;

                    case 3:
                        Console.Write("Enter Title to Search: ");
                        string searchTitle = Console.ReadLine();
                        library.SearchBookByTitle(searchTitle);
                        break;

                    case 4:
                        library.DisplayAllBooks();
                        break;

                    case 5:
                        Environment.Exit(0);
                        break;

                    default:
                        Console.WriteLine("Invalid choice. Please try again.");
                        break;
                }
            }
            else
            {
                Console.WriteLine("Invalid input. Please enter a valid choice.");
            }
        }
    }
}


// Book.cs

public class Book
{
    public string Title { get; set; }
    public string Author { get; set; }
    public string ISBN { get; set; }

    public override string ToString()
    {
        return $"Title: {Title}, Author: {Author}, ISBN: {ISBN}";
    }
}

// Library.cs

using System;
using System.Collections.Generic;
using System.Linq;

public class Library
{
    private List<Book> books;

    public Library()
    {
        books = new List<Book>();
    }

    public void AddBook(Book book)
    {
        books.Add(book);
        Console.WriteLine("Book added to the library.");
    }

    public void RemoveBook(string isbn)
    {
        Book bookToRemove = books.FirstOrDefault(b => b.ISBN == isbn);
        if (bookToRemove != null)
        {
            books.Remove(bookToRemove);
            Console.WriteLine("Book removed from the library.");
        }
        else
        {
            Console.WriteLine("Book not found in the library.");
        }
    }

    public void SearchBookByTitle(string title)
    {
        List<Book> matchingBooks = books.Where(b => b.Title.Contains(title)).ToList();
        if (matchingBooks.Count > 0)
        {
            Console.WriteLine("Matching Books:");
            foreach (var book in matchingBooks)
            {
                Console.WriteLine(book);
            }
        }
        else
        {
            Console.WriteLine("No matching books found.");
        }
    }

    public void DisplayAllBooks()
    {
        if (books.Count > 0)
        {
            Console.WriteLine("Library Books:");
            foreach (var book in books)
            {
                Console.WriteLine(book);
            }
        }
        else
        {
            Console.WriteLine("The library is empty.");
        }
    }
}